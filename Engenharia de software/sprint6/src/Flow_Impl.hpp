#ifndef FLOW_IMPL_HPP
    #define FLOW_IMPL_HPP
    
    #include <iostream>
    #include <string>
    
    #include "Flow.hpp"
    #include "handleBody.hpp"

    /// @brief Implementation of Flow's methods
    class Flow_Impl : public Body
    {
        public:
            Flow_Impl();
            virtual ~Flow_Impl();

        protected:
            string name;
            System *origin;
            System *target;

        public:
            Flow_Impl(const string name, System *origin, System *target);

            Flow_Impl(Flow &obj);
            Flow &operator=(const Flow &obj);

            string getName() const;
            void setName(const string name);
            System *getOrigin() const;
            void setOrigin(System *origin);
            System *getTarget() const;
            void setTarget(System *target);

            /// @brief Execute an equation.
            ///
            /// To set an equation, create a subclass and implement this method.
            /// @return Value generated by the equation.
            virtual double execute() = 0;
    };
    template <class T>
    class FlowHandle : public Flow, public Handle<T>{
    public:
        /**
     * @brief Flow default constructor
    */
        FlowHandle(){
            Handle<T>::pImpl_->setOrigin(NULL);
            Handle<T>::pImpl_->setTarget(NULL);
            Handle<T>::pImpl_->setName("");
        }
            /**
     * @brief Flow constructor that receives pointers to the source and target systems
     * @param source pointer to the source system of the flow
     * @param target pointer to the target system of the flow
    */
        FlowHandle(const string name,System* source, System* target){
            Handle<T>::pImpl_->setOrigin(source);
            Handle<T>::pImpl_->setTarget(target);
            Handle<T>::pImpl_->setName(name);
        }
            /**
     * @brief Constructor for copy of flow
     * @param f flow object that will be copied
    */
        FlowHandle(const Flow& f){
            Handle<T>::pImpl_->setOrigin(f.getOrigin());
            Handle<T>::pImpl_->setTarget(f.getTarget());
        }

        string getName() const{return Handle<T>::pImpl_->getName();}
        void setName(const string name) {Handle<T>::pImpl_->setName(name);}
            /**
     * @brief Sets the pointer to the source system of the flow
     * @param s pointer to the source system of the flow
    */
        void setOrigin(System* s){Handle<T>::pImpl_->setOrigin(s);}
          /**
     * @brief Returns the pointer to the source system of the flow
     * @return system pointer that points to the source system of the flow
    */
        System* getOrigin() const{return Handle<T>::pImpl_->getOrigin();}
            /**
     * @brief Sets the pointer to the target system of the flow
     * @param s pointer to the target system of the flow
    */
        void setTarget(System* s){Handle<T>::pImpl_->setTarget(s);}
        /**
     * @brief Returns the pointer to the target system of the flow
     * @return system pointer that points to the target system of the flow
    */
        System* getTarget() const{return Handle<T>::pImpl_->getTarget();}
        /**
     * @brief Executes the equation that must be performed by the flow
     * @return double containing the result of the equation
    */
        double execute(){return Handle<T>::pImpl_->execute();}
        /**
     * @brief Defines how the '=' operator works for flows
     * @param f flow object that will be copied
     * @return a reference to the copied flow
    */
        Flow& operator=(const Flow& f){
            if(this == &f) return *this;

            Handle<T>::pImpl_->setOrigin(f.getOrigin());
            Handle<T>::pImpl_->setTarget(f.getTarget());

            return *this;
        }
    };
#endif